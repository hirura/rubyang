#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Rubyang
  module Xpath
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,   123,   128,   -38,   148,   139,   140,   141,
    27,    28,    29,   126,   119,   149,   139,   140,   141,    31,
    31,    64,    31,    31,     5,   129,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    70,
    32,    32,    71,    32,    32,    26,    67,    28,    29,   139,
   140,   141,    80,   133,   134,   135,   136,   133,   134,   135,
   136,   -38,    87,   -38,   -38,   -38,    62,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,     5,    61,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    70,    31,    60,    71,   131,   132,    26,    67,
    28,    29,   137,   138,    59,    80,   133,   134,   135,   136,
   131,   132,   137,   138,    32,    87,   137,   138,   137,   138,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     5,    57,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    70,   137,   138,    71,    56,
    55,    26,    67,    28,    29,    54,    50,   165,    80,  -123,
   130,   126,    48,    30,   142,   130,   145,   143,    87,   147,
   127,   121,   120,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,     5,   118,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    70,   nil,
   nil,    71,   nil,   nil,    26,    67,    28,    29,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    87,   nil,   nil,   nil,   nil,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,     5,   nil,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    70,   nil,   nil,    71,   nil,   nil,    26,    67,    28,
    29,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,     5,
   nil,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    70,   nil,   nil,    71,   nil,   nil,
    26,    67,    28,    29,   nil,   nil,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,
   nil,   nil,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,     5,   nil,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    70,   nil,   nil,
    71,   nil,   nil,    26,    67,    28,    29,   nil,   nil,   nil,
    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    87,   nil,   nil,   nil,   nil,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,     5,   nil,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    70,   nil,   nil,    71,   nil,   nil,    26,    67,    28,    29,
   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,     5,   nil,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    70,   nil,   nil,    71,   nil,   nil,    26,
    67,    28,    29,   nil,   nil,   nil,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,
   nil,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,     5,   nil,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    70,   nil,   nil,    71,
   nil,   nil,    26,    67,    28,    29,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,     5,   nil,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    70,
   nil,   nil,    71,   nil,   nil,    26,    67,    28,    29,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    87,   nil,   nil,   nil,   nil,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,     5,   nil,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    70,   nil,   nil,    71,   nil,   nil,    26,    67,
    28,    29,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     5,   nil,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    70,   nil,   nil,    71,   nil,
   nil,    26,    67,    28,    29,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,
   nil,   nil,   nil,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,     5,   nil,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    70,   nil,
   nil,    71,   nil,   nil,    26,    67,    28,    29,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    87,   nil,   nil,   nil,   nil,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,     5,   nil,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    70,   nil,   nil,    71,   nil,   nil,    26,    67,    28,
    29,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,     5,
   nil,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    70,   nil,    37,    71,   nil,   nil,
    26,    67,    28,    29,   nil,   nil,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,    38,   nil,
   nil,   nil,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,    39,   nil,    41,    42,    43,     5,   nil,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,   nil,   nil,   nil,   nil,   nil,   nil,    26,    27,
    28,    29,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    27,    28,    29,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,    28,    29,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    28,
    29,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    28,    29,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    28,    29 ]

racc_action_check = [
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,    74,    78,     5,   124,    85,    85,    85,
     5,     5,     5,    74,    65,   124,   161,   161,   161,   152,
     3,    57,   151,    33,    70,    78,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
   152,     3,    70,   151,    33,    70,    70,    70,    70,   160,
   160,   160,    70,    83,    83,    83,    83,   155,   155,   155,
   155,     5,    70,     5,     5,     5,    56,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,   130,    55,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,    49,    54,   130,    82,    82,   130,   130,
   130,   130,    84,    84,    53,   130,   154,   154,   154,   154,
   153,   153,   156,   156,    49,   130,   157,   157,   158,   158,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   136,    46,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   159,   159,   136,    39,
    37,   136,   136,   136,   136,    36,    30,   143,   136,   145,
   146,   149,    11,     1,    87,    81,   117,    88,   136,   122,
    76,    68,    67,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   135,    61,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   nil,
   nil,   135,   nil,   nil,   135,   135,   135,   135,   nil,   nil,
   nil,   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   135,   nil,   nil,   nil,   nil,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   134,   nil,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   nil,   nil,   134,   nil,   nil,   134,   134,   134,
   134,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   133,
   nil,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   nil,   nil,   133,   nil,   nil,
   133,   133,   133,   133,   nil,   nil,   nil,   133,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   133,   nil,   nil,
   nil,   nil,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   132,   nil,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   nil,   nil,
   132,   nil,   nil,   132,   132,   132,   132,   nil,   nil,   nil,
   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   nil,   nil,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,    59,   nil,    59,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,   nil,   nil,    59,   nil,   nil,    59,    59,    59,    59,
   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,   131,   nil,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   nil,   nil,   131,   nil,   nil,   131,
   131,   131,   131,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   127,   nil,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   nil,   nil,   127,
   nil,   nil,   127,   127,   127,   127,   nil,   nil,   nil,   127,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   121,   nil,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   nil,   nil,   121,   nil,   nil,   121,   121,   121,   121,   nil,
   nil,   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   121,   nil,   nil,   nil,   nil,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   141,   nil,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   nil,   nil,   141,   nil,   nil,   141,   141,
   141,   141,   nil,   nil,   nil,   141,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   nil,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   140,   nil,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   nil,   nil,   140,   nil,
   nil,   140,   140,   140,   140,   nil,   nil,   nil,   140,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   140,   nil,
   nil,   nil,   nil,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   139,   nil,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   nil,
   nil,   139,   nil,   nil,   139,   139,   139,   139,   nil,   nil,
   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   139,   nil,   nil,   nil,   nil,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   138,   nil,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   nil,   nil,   138,   nil,   nil,   138,   138,   138,
   138,   nil,   nil,   nil,   138,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   138,   nil,   nil,   nil,   nil,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   137,
   nil,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   nil,     9,   137,   nil,   nil,
   137,   137,   137,   137,   nil,   nil,   nil,   137,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   137,     9,   nil,
   nil,   nil,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,     9,   nil,     9,     9,     9,     0,   nil,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   nil,   nil,   nil,   nil,   nil,   nil,     0,     0,
     0,     0,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   129,   129,   129,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,    31,    31,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,
    32,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    26,    26,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   128,   128,   128 ]

racc_action_pointer = [
  1205,   213,   nil,    28,   nil,    -4,   nil,   nil,   nil,  1127,
   nil,   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1297,   nil,   nil,   nil,
   206,  1251,  1274,    31,   nil,   nil,   188,   183,   nil,   123,
   nil,   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,   121,
   nil,   nil,   nil,   113,   106,    88,    35,   -44,   nil,   543,
   nil,   236,   nil,   nil,   nil,     2,   nil,   177,   190,   nil,
    32,   nil,   nil,   nil,    -5,   nil,   191,   nil,    12,   nil,
   nil,   183,    93,    28,    93,   -24,   nil,   170,   193,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,
   nil,   762,   201,   nil,    -2,   nil,   nil,   689,  1320,  1228,
   105,   616,   470,   397,   324,   251,   178,  1127,  1054,   981,
   908,   835,   nil,   162,   nil,   133,   178,   nil,   nil,   183,
   nil,    30,    27,   107,   101,    32,   103,   107,   109,   157,
    18,   -15,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -38,  -125,    -1,    -2,    -3,    -4,    -6,    -7,    -9,  -125,
   -11,  -125,   -13,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -38,   -36,   -37,   -39,
  -125,   -38,   -38,    -5,   -14,   -29,  -125,  -125,  -113,  -124,
  -115,  -116,  -117,  -118,  -119,  -120,  -125,  -122,   -12,   -34,
   167,    -8,   -35,   -10,  -125,  -125,  -125,  -125,   -15,   -38,
   -30,  -125,  -114,  -121,  -124,  -125,   -33,   -36,   -40,   -41,
   -38,   -43,   -44,   -45,  -125,   -51,   -78,   -53,   -54,   -57,
   -58,   -59,   -61,   -63,   -66,   -71,   -74,  -125,   -80,   -84,
   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,
   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,
  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -125,   -31,   -32,
   -83,   -38,  -125,   -46,  -125,   -48,   -50,   -38,   -38,   -38,
   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,   -38,
   -38,   -38,   -79,   -81,  -112,  -124,   -60,   -42,   -47,  -125,
   -52,   -55,   -56,   -62,   -64,   -65,   -67,   -68,   -69,   -70,
   -72,   -73,   -75,   -76,   -77,   -82,   -49 ]

racc_goto_table = [
    33,    40,   125,    66,   156,   157,   158,   159,   162,   163,
   164,   160,   161,   150,   122,    51,    52,   154,   155,   146,
   153,    49,     1,    63,     2,    34,    53,    58,    35,    36,
    65,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   166,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   144,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   151,   152 ]

racc_goto_check = [
     3,    36,    26,    18,    33,    33,    33,    33,    35,    35,
    35,    34,    34,    28,    18,     6,     6,    32,    32,    30,
    31,     3,     1,    40,     2,     9,    10,    14,    15,    16,
    17,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,     3 ]

racc_goto_pointer = [
   nil,    22,    24,    -5,   nil,   nil,   -16,   nil,   nil,    16,
    -8,   nil,   nil,   nil,   -26,    19,    20,   -29,   -56,   nil,
   nil,   nil,   nil,   nil,   nil,   -43,   -72,   nil,  -114,   nil,
  -102,  -110,  -114,  -129,  -126,  -131,    -8,   nil,   nil,   nil,
   -34 ]

racc_goto_default = [
   nil,   nil,    77,     3,     4,     6,     7,     8,     9,   nil,
   nil,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,    68,
    79,    69,    72,    73,    74,   nil,   nil,    76,    75,    78,
    81,    82,    83,    84,    85,    86,   nil,    44,    45,    46,
    47 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 81, :_reduce_1,
  1, 82, :_reduce_2,
  1, 82, :_reduce_3,
  1, 84, :_reduce_4,
  2, 84, :_reduce_5,
  1, 84, :_reduce_6,
  1, 83, :_reduce_7,
  3, 83, :_reduce_8,
  1, 83, :_reduce_9,
  3, 86, :_reduce_10,
  1, 86, :_reduce_11,
  2, 88, :_reduce_12,
  1, 88, :_reduce_13,
  0, 90, :_reduce_14,
  2, 90, :_reduce_15,
  1, 92, :_reduce_16,
  1, 92, :_reduce_17,
  1, 92, :_reduce_18,
  1, 92, :_reduce_19,
  1, 92, :_reduce_20,
  1, 92, :_reduce_21,
  1, 92, :_reduce_22,
  1, 92, :_reduce_23,
  1, 92, :_reduce_24,
  1, 92, :_reduce_25,
  1, 92, :_reduce_26,
  1, 92, :_reduce_27,
  1, 92, :_reduce_28,
  1, 89, :_reduce_29,
  3, 89, :_reduce_30,
  4, 89, :_reduce_31,
  3, 94, :_reduce_32,
  1, 97, :_reduce_33,
  2, 85, :_reduce_34,
  3, 87, :_reduce_35,
  1, 91, :_reduce_36,
  1, 91, :_reduce_37,
  0, 93, :_reduce_38,
  1, 93, :_reduce_39,
  1, 98, :_reduce_40,
  1, 100, :_reduce_41,
  3, 100, :_reduce_42,
  1, 100, :_reduce_43,
  1, 100, :_reduce_44,
  1, 100, :_reduce_45,
  2, 103, :_reduce_46,
  3, 103, :_reduce_47,
  1, 105, :_reduce_48,
  3, 105, :_reduce_49,
  1, 106, :_reduce_50,
  1, 107, :_reduce_51,
  3, 107, :_reduce_52,
  1, 108, :_reduce_53,
  1, 108, :_reduce_54,
  3, 108, :_reduce_55,
  3, 108, :_reduce_56,
  1, 109, :_reduce_57,
  1, 109, :_reduce_58,
  1, 99, :_reduce_59,
  3, 99, :_reduce_60,
  1, 110, :_reduce_61,
  3, 110, :_reduce_62,
  1, 111, :_reduce_63,
  3, 111, :_reduce_64,
  3, 111, :_reduce_65,
  1, 112, :_reduce_66,
  3, 112, :_reduce_67,
  3, 112, :_reduce_68,
  3, 112, :_reduce_69,
  3, 112, :_reduce_70,
  1, 113, :_reduce_71,
  3, 113, :_reduce_72,
  3, 113, :_reduce_73,
  1, 114, :_reduce_74,
  3, 114, :_reduce_75,
  3, 114, :_reduce_76,
  3, 114, :_reduce_77,
  1, 115, :_reduce_78,
  2, 115, :_reduce_79,
  1, 102, :_reduce_80,
  2, 102, :_reduce_81,
  3, 102, :_reduce_82,
  2, 102, :_reduce_83,
  1, 104, :_reduce_84,
  1, 104, :_reduce_85,
  1, 104, :_reduce_86,
  1, 104, :_reduce_87,
  1, 104, :_reduce_88,
  1, 104, :_reduce_89,
  1, 104, :_reduce_90,
  1, 104, :_reduce_91,
  1, 104, :_reduce_92,
  1, 104, :_reduce_93,
  1, 104, :_reduce_94,
  1, 104, :_reduce_95,
  1, 104, :_reduce_96,
  1, 104, :_reduce_97,
  1, 104, :_reduce_98,
  1, 104, :_reduce_99,
  1, 104, :_reduce_100,
  1, 104, :_reduce_101,
  1, 104, :_reduce_102,
  1, 104, :_reduce_103,
  1, 104, :_reduce_104,
  1, 104, :_reduce_105,
  1, 104, :_reduce_106,
  1, 104, :_reduce_107,
  1, 104, :_reduce_108,
  1, 104, :_reduce_109,
  1, 104, :_reduce_110,
  1, 104, :_reduce_111,
  2, 101, :_reduce_112,
  1, 95, :_reduce_113,
  3, 95, :_reduce_114,
  1, 95, :_reduce_115,
  1, 96, :_reduce_116,
  1, 96, :_reduce_117,
  1, 96, :_reduce_118,
  1, 116, :_reduce_119,
  1, 116, :_reduce_120,
  3, 117, :_reduce_121,
  1, 118, :_reduce_122,
  1, 119, :_reduce_123,
  1, 120, :_reduce_124 ]

racc_reduce_n = 125

racc_shift_n = 167

racc_token_table = {
  false => 0,
  :error => 1,
  "/" => 2,
  "::" => 3,
  "ancestor" => 4,
  "ancestor-or-self" => 5,
  "attribute" => 6,
  "child" => 7,
  "descendant" => 8,
  "descendant-or-self" => 9,
  "following" => 10,
  "following-sibling" => 11,
  "namespace" => 12,
  "parent" => 13,
  "preceding" => 14,
  "preceding-sibling" => 15,
  "self" => 16,
  "(" => 17,
  ")" => 18,
  "processing-instruction" => 19,
  "Literal" => 20,
  "[" => 21,
  "]" => 22,
  "//" => 23,
  "." => 24,
  ".." => 25,
  "@" => 26,
  "," => 27,
  "Exp" => 28,
  "|" => 29,
  "FilterExpr Predicat" => 30,
  "or" => 31,
  "and" => 32,
  "=" => 33,
  "!=" => 34,
  "<" => 35,
  ">" => 36,
  "<=" => 37,
  ">=" => 38,
  "+" => 39,
  "-" => 40,
  "*" => 41,
  "div" => 42,
  "mod" => 43,
  "UnaryExp" => 44,
  "Digits" => 45,
  "last(" => 46,
  "position(" => 47,
  "count(" => 48,
  "id(" => 49,
  "local-name(" => 50,
  "namespace-uri(" => 51,
  "name(" => 52,
  "string(" => 53,
  "concat(" => 54,
  "starts-with(" => 55,
  "contains(" => 56,
  "substring-before(" => 57,
  "substring-after(" => 58,
  "substring(" => 59,
  "string-length(" => 60,
  "normalize-space(" => 61,
  "translate(" => 62,
  "boolean(" => 63,
  "not(" => 64,
  "true(" => 65,
  "false(" => 66,
  "lang(" => 67,
  "number(" => 68,
  "sum(" => 69,
  "floor(" => 70,
  "ceiling(" => 71,
  "round(" => 72,
  "current(" => 73,
  "$" => 74,
  "NCName" => 75,
  ":" => 76,
  "comment" => 77,
  "text" => 78,
  "node" => 79 }

racc_nt_base = 80

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"/\"",
  "\"::\"",
  "\"ancestor\"",
  "\"ancestor-or-self\"",
  "\"attribute\"",
  "\"child\"",
  "\"descendant\"",
  "\"descendant-or-self\"",
  "\"following\"",
  "\"following-sibling\"",
  "\"namespace\"",
  "\"parent\"",
  "\"preceding\"",
  "\"preceding-sibling\"",
  "\"self\"",
  "\"(\"",
  "\")\"",
  "\"processing-instruction\"",
  "\"Literal\"",
  "\"[\"",
  "\"]\"",
  "\"//\"",
  "\".\"",
  "\"..\"",
  "\"@\"",
  "\",\"",
  "\"Exp\"",
  "\"|\"",
  "\"FilterExpr Predicat\"",
  "\"or\"",
  "\"and\"",
  "\"=\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"div\"",
  "\"mod\"",
  "\"UnaryExp\"",
  "\"Digits\"",
  "\"last(\"",
  "\"position(\"",
  "\"count(\"",
  "\"id(\"",
  "\"local-name(\"",
  "\"namespace-uri(\"",
  "\"name(\"",
  "\"string(\"",
  "\"concat(\"",
  "\"starts-with(\"",
  "\"contains(\"",
  "\"substring-before(\"",
  "\"substring-after(\"",
  "\"substring(\"",
  "\"string-length(\"",
  "\"normalize-space(\"",
  "\"translate(\"",
  "\"boolean(\"",
  "\"not(\"",
  "\"true(\"",
  "\"false(\"",
  "\"lang(\"",
  "\"number(\"",
  "\"sum(\"",
  "\"floor(\"",
  "\"ceiling(\"",
  "\"round(\"",
  "\"current(\"",
  "\"$\"",
  "\"NCName\"",
  "\":\"",
  "\"comment\"",
  "\"text\"",
  "\"node\"",
  "$start",
  "statement",
  "\"LocationPath\"",
  "\"RelativeLocationPath\"",
  "\"AbsoluteLocationPath\"",
  "\"AbbreviatedAbsoluteLocationPath\"",
  "\"Step\"",
  "\"AbbreviatedRelativeLocationPath\"",
  "\"AxisSpecifier\"",
  "\"NodeTest\"",
  "\"Predicates\"",
  "\"AbbreviatedStep\"",
  "\"AxisName\"",
  "\"AbbreviatedAxisSpecifier\"",
  "\"Predicate\"",
  "\"NameTest\"",
  "\"NodeType\"",
  "\"PredicateExpr\"",
  "\"Expr\"",
  "\"OrExpr\"",
  "\"PrimaryExpr\"",
  "\"VariableReference\"",
  "\"Number\"",
  "\"FunctionCall\"",
  "\"FunctionName(\"",
  "\"Arguments\"",
  "\"Argument\"",
  "\"UnionExpr\"",
  "\"PathExpr\"",
  "\"FilterExpr\"",
  "\"AndExpr\"",
  "\"EqualityExpr\"",
  "\"RelationalExpr\"",
  "\"AdditiveExpr\"",
  "\"MultiplicativeExpr\"",
  "\"UnaryExpr\"",
  "\"QName\"",
  "\"PrefixedName\"",
  "\"UnprefixedName\"",
  "\"Prefix\"",
  "\"LocalPart\"" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_1(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts 'statement : LocationPath'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_2(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"LocationPath" : "RelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_3(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"LocationPath" : "AbsoluteLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_4(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbsoluteLocationPath" : "/"'
									puts "val: #{val.inspect}"
								end
								axis = Rubyang::Xpath::Axis.new Rubyang::Xpath::Axis::SELF
								node_test = Rubyang::Xpath::NodeTest.new Rubyang::Xpath::NodeTest::NodeTestType::NAME_TEST, '/'
								predicates = Rubyang::Xpath::Predicates.new
								location_step = Rubyang::Xpath::LocationStep.new axis, node_test, predicates
								result = Rubyang::Xpath::LocationSteps.new location_step
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_5(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbsoluteLocationPath" : "/" "RelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								axis = Rubyang::Xpath::Axis.new Rubyang::Xpath::Axis::SELF
								node_test = Rubyang::Xpath::NodeTest.new Rubyang::Xpath::NodeTest::NodeTestType::NAME_TEST, '/'
								predicates = Rubyang::Xpath::Predicates.new
								location_step = Rubyang::Xpath::LocationStep.new axis, node_test, predicates
								location_steps = Array.new
								location_steps.push location_step
								location_steps.push *val[1]
								result = Rubyang::Xpath::LocationSteps.new *location_steps
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_6(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbsoluteLocationPath" : "AbbreviatedAbsoluteLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_7(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelativeLocationPath" : "Step"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::LocationSteps.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_8(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelativeLocationPath" : "RelativeLocationPath" "/" "Step"'
									puts "val: #{val.inspect}"
								end
								result = val[0].push val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_9(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelativeLocationPath" : "AbbreviatedRelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_10(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Step" : "AxisSpecifier" "NodeTest" "Predicates"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::LocationStep.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_11(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Step" : "AbbreviatedStep"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_12(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisSpecifier" : "AxisName" "::"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_13(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisSpecifier" : "AbbreviatedAxisSpecifier"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_14(val, _values, result)
    								result = Rubyang::Xpath::Predicates.new
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_15(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Predicates" : "Predicates"			"'
									puts "val: #{val.inspect}"
								end
								result = val[0].push val[1]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_16(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "ancestor"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::ANCESTOR
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_17(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "ancestor-or-self"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::ANCESTOR_OR_SELF
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_18(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "attribute"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::ATTRIBUTE
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_19(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "child"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::CHILD
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_20(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "descendant"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::DESCENDANT
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_21(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "descendant-or-self"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::DESCENDANT_OR_SELF
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_22(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "following"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::FOLLOWING
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_23(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "following-sibling"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::FOLLOWING_SIBLING
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_24(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "namespace"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::NAMESPACE
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_25(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "parent"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::PARENT
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_26(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "preceding"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::PRECEDING
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_27(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "preceding-sibling"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::PRECEDING_SIBLING
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_28(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AxisName" : "self"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::SELF
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_29(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeTest" : "NameTest"'
									puts "val: #{val.inspect}"
								end
								name_test_type = Rubyang::Xpath::NodeTest::NodeTestType::NAME_TEST
								result = Rubyang::Xpath::NodeTest.new name_test_type, val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 253)
  def _reduce_30(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeTest" : "NodeType" "(" ")"'
									puts "val: #{val.inspect}"
								end
								name_test_type = Rubyang::Xpath::NodeTest::NodeTestType::NODE_TYPE
								result = Rubyang::Xpath::NodeTest.new name_test_type, val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_31(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeTest" : "processing-instruction" "(" "Literal" ")"'
									puts "val: #{val.inspect}"
								end
								name_test_type = Rubyang::Xpath::NodeTest::NodeTestType::PROCESSING_INSTRUCTION
								result = Rubyang::Xpath::NodeTest.new name_test_type, val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_32(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Predicate" : "[" "PredicateExpr" "]"'
									puts "val: #{val.inspect}"
								end
								result = val[1]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_33(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PredicateExpr" : "Expr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_34(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedAbsoluteLocationPath" : "//" "RelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								raise "AbbreviatedAbsoluteLocationPath is not implemented"
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_35(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedRelativeLocationPath" : "RelativeLocationPath" "//" "Step"'
									puts "val: #{val.inspect}"
								end
								raise "AbbreviatedRelativeLocationPath is not implemented"
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_36(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedStep" : "."'
									puts "val: #{val.inspect}"
								end
								axis = Rubyang::Xpath::Axis.new Rubyang::Xpath::Axis::SELF
								node_test = Rubyang::Xpath::NodeTest.new Rubyang::Xpath::NodeTest::NodeTestType::NAME_TEST, '*'
								predicates = Rubyang::Xpath::Predicates.new
								result = Rubyang::Xpath::LocationStep.new axis, node_test, predicates
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_37(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedStep" : ".."'
									puts "val: #{val.inspect}"
								end
								axis = Rubyang::Xpath::Axis.new Rubyang::Xpath::Axis::PARENT
								node_test = Rubyang::Xpath::NodeTest.new Rubyang::Xpath::NodeTest::NodeTestType::NODE_TYPE, Rubyang::Xpath::NodeTest::NodeType::NODE
								predicates = Rubyang::Xpath::Predicates.new
								result = Rubyang::Xpath::LocationStep.new axis, node_test, predicates
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_38(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedAxisSpecifier" : '
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::CHILD
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_39(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AbbreviatedAxisSpecifier" : "@"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Axis::ATTRIBUTE
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_40(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Expr" : "OrExpr"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_41(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrimaryExpr" : "VariableReference"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								raise "VariableReference is not implemented"
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 368)
  def _reduce_42(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrimaryExpr" : "(" "Expr" ")"'
									puts "val: #{val.inspect}"
								end
								result = val[1]
								raise "'(' Expr ')' is not implemented"
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 377)
  def _reduce_43(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrimaryExpr" : "Literal"'
									puts "val: #{val.inspect}"
								end
								literal = Rubyang::Xpath::Predicate::Literal.new val[0]
								result = Rubyang::Xpath::Predicate::PrimaryExpr.new literal
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_44(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrimaryExpr" : "Number"'
									puts "val: #{val.inspect}"
								end
								number = Rubyang::Xpath::Predicate::Number.new val[0]
								result = Rubyang::Xpath::Predicate::PrimaryExpr.new number
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 395)
  def _reduce_45(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrimaryExpr" : "FunctionCall"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::PrimaryExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 404)
  def _reduce_46(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionCall" : "FunctionName(" ")"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_47(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionCall" : "FunctionName(" "Arguments" ")"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall.new val[0], val[1]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_48(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Arguments" : "Argument"'
									puts "val: #{val.inspect}"
								end
								result = [val[0]]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_49(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Arguments" : "Arguments" "," "Argument"'
									puts "val: #{val.inspect}"
								end
								result = val[0] + [val[1]]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 438)
  def _reduce_50(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Argument" : "Exp"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 447)
  def _reduce_51(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"UnionExpr" : "PathExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::UnionExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 455)
  def _reduce_52(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"UnionExpr" : "UnionExpr" "|" "PathExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::UnionExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 464)
  def _reduce_53(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PathExpr" : "LocationPath"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::PathExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_54(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PathExpr" : "FilterExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::PathExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 480)
  def _reduce_55(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PathExpr" : "FilterExpr" "/" "RelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::PathExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 488)
  def _reduce_56(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PathExpr" : "FilterExpr" "//" "RelativeLocationPath"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::PathExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 497)
  def _reduce_57(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FilterExpr" : "PrimaryExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FilterExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 505)
  def _reduce_58(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FilterExpr" : "FilterExpr Predicat"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FilterExpr.new val[0], val[1]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_59(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"OrExpr" : "AndExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::OrExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 522)
  def _reduce_60(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"OrExpr" : "OrExpr" "or" "AndExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::OrExpr.new val[0], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 531)
  def _reduce_61(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AndExpr" : "EqualityExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::AndExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 539)
  def _reduce_62(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AndExpr" : "AndExpr" "and" "EqualityExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::AndExpr.new val[0], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 548)
  def _reduce_63(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"EqualityExpr" : "RelationalExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::EqualityExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 556)
  def _reduce_64(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"EqualityExpr" : "EqualityExpr" "=" "RelationalExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::EqualityExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 564)
  def _reduce_65(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"EqualityExpr" : "EqualityExpr" "!=" "RelationalExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::EqualityExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 573)
  def _reduce_66(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelationalExpr" : "AdditiveExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::RelationalExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 581)
  def _reduce_67(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelationalExpr" : "RelationalExpr" "<" "AdditiveExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::RelationalExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 589)
  def _reduce_68(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelationalExpr" : "RelationalExpr" ">" "AdditiveExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::RelationalExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 597)
  def _reduce_69(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelationalExpr" : "RelationalExpr" "<=" "AdditiveExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::RelationalExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 605)
  def _reduce_70(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"RelationalExpr" : "RelationalExpr" ">=" "AdditiveExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::RelationalExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 614)
  def _reduce_71(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AdditiveExpr" : "MultiplicativeExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::AdditiveExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_72(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AdditiveExpr" : "AdditiveExpr" "+" "MultiplicativeExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::AdditiveExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 630)
  def _reduce_73(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"AdditiveExpr" : "AdditiveExpr" "-" "MultiplicativeExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::AdditiveExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 639)
  def _reduce_74(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"MultiplicativeExpr" : "UnaryExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::MultiplicativeExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 647)
  def _reduce_75(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"MultiplicativeExpr" : "MultiplicativeExpr" "*" "UnaryExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::MultiplicativeExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 655)
  def _reduce_76(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"MultiplicativeExpr" : "MultiplicativeExpr" "div" "UnaryExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::MultiplicativeExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 663)
  def _reduce_77(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"MultiplicativeExpr" : "MultiplicativeExpr" "mod" "UnaryExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::MultiplicativeExpr.new val[0], val[1], val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 672)
  def _reduce_78(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"UnaryExp" : "UnionExpr"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::UnaryExpr.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 680)
  def _reduce_79(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"UnaryExp" : "-" "UnaryExp"'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::UnaryExpr.new val[1], val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 689)
  def _reduce_80(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Number" : "Digits"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 697)
  def _reduce_81(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Number" : "Digits" "."'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 705)
  def _reduce_82(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Number" : "Digits" "." "Digits"'
									puts "val: #{val.inspect}"
								end
								result = val[0] + val[1] + val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 713)
  def _reduce_83(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Number" : "." "Digits"'
									puts "val: #{val.inspect}"
								end
								result = "0" + val[1] + val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 722)
  def _reduce_84(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "last("'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 730)
  def _reduce_85(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "position("'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 739)
  def _reduce_86(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "count("'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 748)
  def _reduce_87(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "id("'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 757)
  def _reduce_88(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "local-name("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 766)
  def _reduce_89(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "namespace-uri("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 775)
  def _reduce_90(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "name("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 784)
  def _reduce_91(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "string("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 793)
  def _reduce_92(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "concat("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 802)
  def _reduce_93(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "starts-with("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 811)
  def _reduce_94(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "contains("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 820)
  def _reduce_95(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "substring-before("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_96(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "substring-after("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 838)
  def _reduce_97(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "substring("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 847)
  def _reduce_98(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "string-length("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 856)
  def _reduce_99(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "normalize-space("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 865)
  def _reduce_100(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "translate("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 874)
  def _reduce_101(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "boolean("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 883)
  def _reduce_102(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "not("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 892)
  def _reduce_103(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "true("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 901)
  def _reduce_104(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "false("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 910)
  def _reduce_105(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "lang("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 919)
  def _reduce_106(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "number("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 928)
  def _reduce_107(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "sum("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 937)
  def _reduce_108(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "floor("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_109(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "ceiling("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 955)
  def _reduce_110(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "round("'
									puts "val: #{val.inspect}"
								end
								result = val[0]
								result = Rubyang::Xpath::Predicate::FunctionCall::LAST
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 964)
  def _reduce_111(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"FunctionName(" : "current("'
									puts "val: #{val.inspect}"
								end
								result = Rubyang::Xpath::Predicate::FunctionCall::CURRENT
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 973)
  def _reduce_112(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"VariableReference" : "$" "QName"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 982)
  def _reduce_113(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NameTest" : "*"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NameTest.new '*'
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 990)
  def _reduce_114(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NameTest" : "NCName" ":" "*"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NameTest.new "#{val[0]}:*"
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 998)
  def _reduce_115(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NameTest" : "QName"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NameTest.new val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1007)
  def _reduce_116(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeType" : "comment"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NodeType::COMMENT
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1015)
  def _reduce_117(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeType" : "text"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NodeType::TEXT
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1023)
  def _reduce_118(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"NodeType" : "node"'
									puts "val: #{val.inspect}"
								end
								Rubyang::Xpath::NodeTest::NodeType::NODE
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1032)
  def _reduce_119(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"QName" : "PrefixedName"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1040)
  def _reduce_120(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"QName" : "UnprefixedName"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1049)
  def _reduce_121(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"PrefixedName" : "Prefix" ":" "LocalPart"'
									puts "val: #{val.inspect}"
								end
								result = val[0] + val[1] + val[2]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1058)
  def _reduce_122(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"UnprefixedName" : "LocalPart"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1067)
  def _reduce_123(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"Prefix" : "NCName"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1076)
  def _reduce_124(val, _values, result)
    								if Rubyang::Xpath::Parser::DEBUG
									puts '"LocalPart" : "NCName"'
									puts "val: #{val.inspect}"
								end
								result = val[0]
							
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Xpath
  end   # module Rubyang
